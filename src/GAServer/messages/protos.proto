syntax = "proto3";
package messages;
import "github.com/AsynkronIT/protoactor-go/actor/protos.proto";


enum GAErrorCode {
	OK = 0;
	Fail = 1;
	Error = 2;
	ServerFull = 3;
	KeyError = 4;
	NoFoundTarget = 5;
}

enum ChannelType {
	Login = 0;
	Heartbeat = 1;


	GameServer = 100;
	Shop = 101;
	Chat = 102;
	
	BattleServer = 200; 
}
//==========Login===========
//登入游戏验证
message CheckLogin {
	uint64 uid = 1;
	string key = 2;
}
message HeartBeatMsg {
}

//=========shop=============
enum ShopMsgType {
	C2S_ShopBuy = 0;
	S2C_ShopBuy = 1;
	C2S_ShopSell = 2;
	S2C_ShopSell = 3;
}

message C2S_ShopBuyMsg {
	uint32 itemId = 1;
}
message S2C_ShopBuyMsg {
	uint32 itemId = 1;
	GAErrorCode result = 2;
}

//=========chat=============
enum ChatMsgType {
	C2S_PrivateChat = 0;
	S2C_PrivateChat = 1;
	S2C_PrivateOtherChat = 2;
	C2S_WorldChat = 3;
	S2C_WorldChat = 4;
}


message C2S_PrivateChatMsg {
	string targetName = 1;
	string msg = 2;
}

message S2C_PrivateChatMsg {
	string targetName = 1;
	string msg = 2;
	GAErrorCode result = 3;
}

message S2C_PrivateOtherChatMsg {
	string sendName = 1;
	string msg = 2;
}

message C2S_WorldChatMsg {
	string msg = 1;
}
message S2C_WorldChatMsg {
	string sendName = 1;
	string msg = 2;
}


//客户端消息转rpc通用消息
message FrameMsg {
	ChannelType channel = 1;
	uint32 msgId  = 2;
	bytes rawData = 3;
}
//gate发送协议
//单
message UnicastFrameMsg {
	FrameMsg frameMsg = 1;
	uint64 target = 2;
}
//组
message MulticastFrameMsg {
	FrameMsg frameMsg = 1;
	repeated uint64 targets = 2;
}
//广播
message BroadcastFrameMsg {
	FrameMsg frameMsg = 1;
}

//加入到管理
message AddAgentToParent {
	uint64 uid = 1;
	actor.PID sender = 2;
}
//移除管理
message RemoveAgentFromParent {
	uint64 uid = 1;
}

message NewChild {

}
message NewChildResult {
	actor.PID pid = 1;
}

message Connect {
    actor.PID Sender = 1;
}

message Connected {
    string Message = 1;
}

message SpawnAgent {
	
}

//服务器状态
enum ServiceState {
	ServiceStateFree = 0;
	ServiceFull = 1;
	ServiceStop = 2;
}

message ServiceValue {
	string Key = 1;
	string Value = 2;
}
//注册服务器
message AddService {
	string serviceName = 1;
	string serviceType = 2;
	actor.PID pid = 3;
	repeated ServiceValue values = 4;
}
//发送成功的通用返回
message SendOK {	
}
//解注册服务器
message RemoveService {
	string serviceName = 1;
	string serviceType = 2;
}
//分配服务器
message ApplyService {
	string serviceType = 1;
}

//分配服务器,返回
message ApplyServiceResult {
	string serviceType = 1;
	string serviceName = 2;
	actor.PID pid = 3;
	repeated ServiceValue values = 4;
	GAErrorCode result = 5;
}
//分配所有服务器
message GetTypeServices {
	string serviceType = 1;
}

message GetTypeServicesResult {
	repeated actor.PID pids = 1;
}

//长传更新服务器信息
message UploadService {
	string serviceName = 1;
	uint32 load = 2;
	ServiceState state = 3;
}


//登录
message UserLogin {
	string account = 1;
	uint64 uid = 2;
}

//登录结果
message UserLoginResult {
	uint64 uid = 1;
	string gateAddr = 2;
	string key = 3;
	GAErrorCode result = 4;
}

//获取玩家session信息
message GetSessionInfo {
	uint64  uid  = 1;
}
message GetSessionInfoByName {
	string name = 1;
}
message GetSessionInfoResult {
	UserBaseInfo userInfo = 1;
	actor.PID agentPID = 2;
	GAErrorCode result = 3;
}

//服务器check
message ServerCheckLogin {
	uint64 uid = 1;
	string key = 2;
	actor.PID agentPID = 3;
}

//服务器绑定信息
message UserBindServer {
	ChannelType channel = 1;
	actor.PID pid = 2;
}

//人物基本信息
message UserBaseInfo {
	string account = 1;
	string name = 2;
	uint64 uid = 3;
}
//验证结果
message CheckLoginResult {
	GAErrorCode result = 1;
	UserBaseInfo baseInfo = 2;
	repeated UserBindServer bindServers = 3;
}

//创建玩家
message CreatePlayer {
	uint64 uid = 1;
	actor.PID agentPID = 2;
}
message CreatePlayerResult {
	GAErrorCode result = 1;
	UserBaseInfo baseInfo = 2;
	actor.PID playerPID = 3;//gs的player地址
}

//掉线
message PlayerOutline {
	string reason = 1;
}

//心跳
message Tick {
} 

//踢下线
message Kick {
	uint64 uid = 1;
}
